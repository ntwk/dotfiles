# .tmux.conf
#
# This configuration is derived from screen-keys.conf by Nicholas Marriott.
# It is aimed at former GNU Screen users and serves to map many of the common
# GNU Screen default key bindings to their equivalent tmux commands but with
# a few exceptions.  Note that some GNU Screen key bindings have no tmux
# equivalent.  This configuration omits bindings for some commands which are
# available in tmux but not in GNU Screen.
#
# Subsequent modifications provide extended functionality; namely, a more
# intelligent detaching mechanism when sessions are grouped.

#
# SESSION OPTIONS
#

# Remove the status bar
set -g status off

# Set the escape delay to match GNU Screen's maptimeout default of 300 ms
set -g escape-time 300

# Set TERM
set -g default-terminal "tmux-256color"

# Increase message display time to 2 seconds
set -g display-time 2000

set -g set-titles on
set -g set-titles-string "#S:#I:#W"

set -g base-index 1
set -g renumber-windows on
set -g automatic-rename on
set -g automatic-rename-format "#{pane_current_command}#{?pane_dead,[dead],}"

#
# WINDOW OPTIONS
#

# vi-style controls for copy mode
setw -g mode-keys vi

# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session, even if both clients are looking
# at different windows.  It seems that in this particular case, GNU Screen
# has the better default where a window is only constrained in size if a
# smaller client is actively looking at it.  This behaviour can be fixed by
# setting tmux's aggressive-resize option.
setw -g aggressive-resize on

#
# BINDINGS
#

# Set the prefix to 'C-\'
set -g prefix 'C-\'
bind '\' send-prefix

# lockscreen ^X x
bind ^X lock-server
bind x lock-server

# screen ^C c
bind ^C new-window
bind c new-window

# detach ^D d

# Before detaching, first check to see if the current session is grouped with
# another session and, if so, kill the session instead of detaching.  If the
# session name matches the session group name, it is considered special and
# is always detached regardless of the number of sessions in the group.
bind ^D if-shell -b "test '#{session_grouped}' = 1 && test '#{session_group_size}' -gt 1 && test '#{session_name}' != '#{session_group}'" "kill-session" "detach-client"
bind d if-shell -b "test '#{session_grouped}' = 1 && test '#{session_group_size}' -gt 1 && test '#{session_name}' != '#{session_group}'" "kill-session" "detach-client"

# displays *
bind * list-clients

# next ^@ ^N sp n
bind ^@ next-window
bind ^N next-window
bind " " next-window
bind n next-window

# title A
bind A command-prompt "rename-window %%"

# other ^A
bind ^A last-window
bind 'C-\' last-window

# prev ^H ^P p ^?
bind ^H previous-window
bind ^P previous-window
bind p previous-window
bind BSpace previous-window

# windows ^W w
bind '"' list-windows

# quit '\'
bind ^Q confirm-before "kill-server"

# kill K k
bind K confirm-before "kill-window"
bind k confirm-before "kill-window"

# redisplay ^L l
bind ^L refresh-client
bind l refresh-client

# split -v |
bind | split-window

# :kB: focus up
bind Tab select-pane -t:.+
bind BTab select-pane -t:.-

# " windowlist -b
bind ^W run-shell 'tmux choose-tree -Nwf"##{==:##{session_name},#{session_name}}"'
bind w run-shell 'tmux choose-tree -Nwf"##{==:##{session_name},#{session_name}}"'

# Open a copy of the current tmux session in a new urxvt window.
bind C run-shell -b "env -u TMUX urxvt -name urxvt-blue -e tmux new-session -A -D -s B -t '#{session_name}' \\; select-window -t '#{window_id}'"

# Kill the aforementioned session copy.
bind D kill-session -t B

# Move the current tmux window to a new session inside a new urxvt window.
# This is much like dragging a browser tab to its own window.
bind v run-shell -b "env -u TMUX urxvt -geometry #{window_width}x#{window_height} -e tmux new-session tmux move-window -s #{session-name}:#{window_id}"

# Move the current window back to session 0.  This key binding is meant to be
# complementary to the preceding binding.
bind b move-window -t 0:

# Toggle read-only client status
bind r switch-client -r

# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is
# no tmux analogue.  This is intended for tmux 1.3, which handles pane
# selection differently from the previous versions.

# Split windows like vim.
# vim's definition of a horizontal/vertical split is reversed from tmux's.
bind S split-window -v
bind V split-window -h

# Move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes like vim
# Feel free to change the "1" to however many lines you want to resize by,
# only one at a time can be slow.
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# Bind : to command-prompt like vim.  This is the default in tmux already.
bind : command-prompt
